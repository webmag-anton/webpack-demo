/* 

при обычном подключении скриптов в html нужно учитывать правильность путей и последовательность 
подключения; webpack решает эти задачи; так же он обрабатыват всю графику, стили, шрифты и др файлы


с webpack можно взаимодействовать через консоль, но более удобно взаимодействовать с webpack через 
конфигурационный файл: для этого в корне нужно создать файл  webpack.config.js, работающий на nodeJS

в новой версии Node.js npm пакеты (локальные) нужно запускать с помощью утилиты npx. 
Например: npx webpack вместо webpack;  в поле scripts в package.json можно не писать npx

в webpack можно импортировать все виды файлов прямо в js-файл - достаточно загрузить определенный лоадер;
webpack сам по себе может работать только с js файлами, он не понимает ни css, ни картинки, ни шрифты...
чтобы webpack мог работать с другими типами данных ему нужны лоадеры; для json-файлов лоадеры не нужны,
их можно просто импортировать в js-файлы, webpack их понимает

в webpack есть 2 режима компиляции, которые отличаются скоростью работы и уровнем оптимизации кода:
   --mode development
   --mode production

флаг --watch в поле scripts в package.json позволяет не выходить из процесса (ctrl+c выход) и 
следить за изменением файлов 

флаг --open у webpack-dev-server нужен для автоматического открытия окна в браузере;  
webpack-dev-server запускается без слова run: npm start; webpack-dev-server складывает все бандлы и файлы 
в оперативную память, поэтому, пока мы из него не вышли ^C, мы не увидем изменений в dist 

пакеты @babel/core и @babel/preset-env необходимы для использования препроцессора babel в webpack;
preset в babel - набор определенных плагинов; @babel/preset-env включает преобразования для ES2015+;
когда мы используем, например, async/await одних пресетов недостаточно, так же нужны  
полифилы (пакет @babel/polyfill); чтобы включить только полифилы и преобразования кода, необходимые 
пользователям, чьи браузеры занимают >0,25% рынка (игнорируя браузеры без обновлений безопасности, 
таких как IE 10) можно в package.json указать поле "browserslist": "> 0.25%, not dead";
без babel-плагина @babel/plugin-proposal-class-properties babel не понимает статические 
свойства/методы классов (это еще не стандарт языка)

команда stats в package.json создает в корне stats.json со статистикой webpack-bundle-analyzer и  
открывает инфографику, как и после команды build (в режиме production)

Пока не импортировали в проект из node_modules установленный модуль, он в проект не попадает! 

*/
 

Команды: 

npx webpack                                  запускает приложение {создает bundle.js}
cross-env NODE_ENV='<mode>'                  устанавливает системному свойству NODE_ENV режим development или production



Пакеты:

webpack                                      корневой функционал webpack
webpack-cli                                  отвечает за команды webpack, которые доступны в консоле
html-webpack-plugin                          меняет подключаемые пути и имена файлов и отправляет html в output 
                                             каталог; так же минифицирует html
clean-webpack-plugin                         очищает проект {./dist} от старых ненужных файлов {со старым [hash]}
css-loader                                   позволяет понимать импорты css файлов в js и отправляет файл в output каталог
style-loader                                 добавляет стили в секцию <head> в html
file-loader                                  преобразует import\require для файла {картинки, шрифты} в URL и отправляет 
                                             файл в output каталог
webpack-dev-server                           разворачивает локальный сервер с вотчингом файлов и автоперезагрузкой
copy-webpack-plugin                          копирует файл или папку в нужное место без обработки
cross-env                                    определяет в какой ОС мы находимя для установки системному свойству NODE_ENV
                                             режим development или production, которое используем в конфиге для настроек
mini-css-extract-plugin                      переименовывает css файл в output каталоге {dist} - как плагин, позволяет не
                                             перезагружать страницу при изменениях - как лоадер miniCssExtractPlugin.loader
                                             и добавляет стили в секцию <head> в html
optimize-css-assets-webpack-plugin           минифицирует css 
terser-webpack-plugin                        минифицирует js 
node-sass                                    корневой функционал sass и scss
sass-loader                                  для взаимодействия webpack и sass
@babel/core                                  корневой функционал babel
babel-loader                                 для взаимодействия webpack и babel
@babel/preset-env                            preset-env включает преобразования для ES2015+
@babel/polyfill                              для использования async/await
@babel/plugin-proposal-class-properties      для понимания babel статических свойства/методы классов
webpack-bundle-analyzer                      анализирует размер файлов и библиотек в приложении и воводит инфографику